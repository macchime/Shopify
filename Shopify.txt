                                       

# -*- coding: utf-8 -*-
"""Shopify.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/125rOCMvDhIHpxIrMha_mqXXol3WEwmmU

## SHOPIFY DATA ANALYSIS

### Question 1

On Shopify, we have exactly 100 sneaker shops, and each of these shops sells only one
model of shoe. We want to do some analysis of the average order value (AOV). When
we look at orders data over a 30 day window, we naively calculate an AOV of $3145.13.
Given that we know these shops are selling sneakers, a relatively affordable item,
something seems wrong with our analysis.

a. Think about what could be going wrong with our calculation. Think about a better
way to evaluate this data.

b. What metric would you report for this dataset?

c. What is its value?
"""

# Commented out IPython magic to ensure Python compatibility.
# The required libraries are imported
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

# The dataset is loaded into the notebook
df = pd.read_csv('2019_Winter_Data_Science _Intern_Challenge _Data _Set_Sheet1.csv')
df.head()

# an info command is carried out to ensure there are no missing values in the dataset and to view the various data types
print(df.shape)
df.info()

# The "created_at" column is changed to a datetime datatype and the order_id is set to the index to eliminate repetitive numbering 
df['created_at'] = pd.to_datetime(df['created_at'])
df1 = df.set_index("order_id", drop=True, append=False, inplace=False, verify_integrity=False)
df1.head()

# confirming the datetime change
df1.info()

# sorting the dataset so it follows the time of creation
df1 = df1.sort_values(by="created_at")
df1.head()

# This indicates that there are exactly 100 shops as mentioned, and there are no repeating order_id, 
# Also checks that there are only 30 days worth of data
print(len(df1.shop_id.unique()))
print(len(df1.index.unique()))
print(len(df1['created_at'].dt.day.unique()))

# This shows the statistical summary of the dataset 
df1.describe().T

"""From the statistical summary it can be seen that there are outliers present in the dataset for "order_amounts" and "total_items" due to the high standard deviation and maximum value for both, which require futher investigation."""

# Checks for presence of outliers(p>3)
df1.kurtosis(numeric_only= True)

"""As was expected both columns (i.e 'order_amount' and 'total_items') have pvalues far greater than the expected outcome.

### Graphical Visualization of the dataset
"""

df1.boxplot(rot='90', color="blue",figsize=(12, 3))

plt.plot(df1["total_items"],df1["order_amount"])

"""From the boxplot and the line graph the investigation shows a relationship between the high values in both columns which can be futher investigated with a more precise visualization plot."""

features = ['total_items', 'order_amount'] # create a list of all numerical features
df[features].hist(figsize=(20,3));

"""From the plot shown above there is a high level of certainty that the outragous amount was due to a high order which makes perfect sense but looking critically at the plot for both column we see a slight protrusion for the high values indicating multiple entry. Thus we can view in the table to ascertain our observations."""

# Creates a dataframe to count the number of occurrences of the order_amounts column
order_amounts = df.groupby(['order_amount']).size().reset_index(name='count').sort_values(by='order_amount', ascending=False)
order_amounts.head(10)

"""From the table above we see that some entries have larger counts than normal which may be due to multiple entries for a single order. """

# Creates a dataframe to count the number of occurrences of the total_items column
total_items = df.groupby(['total_items']).size().reset_index(name='count').sort_values(by='total_items', ascending=False)
total_items.head(10)

"""The table above solidifies our claim of the obvious relationship between the two aforementioned columns.

#### ORDERED BY DATE
"""

# Classifies the dataset with the maximum counts observed  earlier and sorts by the date of entry.
df2 = df1.loc[df1['order_amount'].isin([704000, 77175, 51450, 25725])].sort_values(by='created_at', ascending=False)
df2.head(50)

"""#### Ordered by amount"""

# Classifies the dataset with the maximum counts observed  earlier and sorts by the order_amount.
df2 = df1.loc[df1['order_amount'].isin([704000,154350,102900, 77175, 51450, 25725])].sort_values(by='order_amount', ascending=False)
df2.head(50)

"""#### Ordered by user_id"""

# Classifies the dataset with the maximum counts observed  earlier and sorts by the user_id.
df2 = df1.loc[df1['order_amount'].isin([704000, 77175, 51450, 25725])].sort_values(by='user_id', ascending=True)
df2.head(60)

"""### Analysis summary
1.) From the Large tables above each ordered by a different feature to give an indepth view of the problem at hand, as can be seen in the first table ordered by date we can tell multiple entries in a single day by the same user, the same total_items, the same amount and the same shop_id.

2.) From the second table classified by order_amount we can see some shop_ids that sell sneakers at a very huge amount, this may be due to incorrect inputs.

3.) From the third table ordered by the user_id the value "607" occurs multiple times indicating multiple entries. So it would be advisable to drop rows with that user_id to get an accurate AOV.

#### Metric of choice
The metric that should be reported for this dataset should be either the ***median value or the modal value*** since both metrics are only slightly affected by the erroneous entries in the dataset.

#### Value of Metric
"""

Median = df1["order_amount"].median()
print("Median value: ", Median)

Mode = df1["order_amount"].mode()
print("Modal value: ", Mode[0])

"""As seen both metrics show the affordability of the sneakers."""

The value reported for the Median is 284
The value reported for the Mode is 153










                                   Shopify SQL
Question 2: 
For this question youâ€™ll need to use SQL. Follow this link to access the data set
required for the challenge. Please use queries to answer the following questions. Paste your
queries along with your final numerical answers below.

a. How many orders were shipped by Speedy Express in total?

SELECT COUNT(*) AS Speedy_Express_count
FROM [Orders] AS o
JOIN Shippers AS sh
ON sh.ShipperID = o.ShipperID
WHERE ShipperName = "Speedy Express";

ANSWER: 54 Orders were shipped by Speedy Express in total

b. What is the last name of the employee with the most orders?

SELECT e.EmployeeID, COUNT(e.EmployeeID) AS Occurrences, LastName
FROM Employees AS e
INNER JOIN Orders AS o
ON e.EmployeeID = o.EmployeeID
GROUP BY e.EmployeeID
ORDER BY Occurrences desc;

ANSWER:The Last Name of the Employee with the most orders is Peacock

c. What product was ordered the most by customers in Germany

SELECT P.ProductName, SUM(OD.Quantity) AS TotalOrdered
FROM Orders AS O
INNER JOIN Customers AS C
ON C.CustomerID = O.CustomerID
INNER JOIN OrderDetails AS OD
ON OD.OrderID = O.OrderID
INNER JOIN Products AS P
ON P.ProductID = OD.ProductID
WHERE C.Country = 'Germany'
GROUP BY OD.ProductID
ORDER BY TotalOrdered DESC

ANSWER: The Product that mostly ordered by german customers was the Boston Crab Meat with a total of 160 Ordered





